---
title: Workload Placement
description: How K8s decides where to run your pods
---

Workload placement happens in two stages (1) `filtering` - which excludes any unsuitable nodes then (2) `scoring` - which ranks the remaining nodes to find the best fit.


## Taint

Taints are a special kind of label with a key-value pair, but it tells the scheduler that a particular node is different.  For example, the `master` taint is applied to control plane nodes by default (so your applications will not get scheduled on this important node).

You can use `taint` to record relevant attributes about nodes, like the type of hardware.  When you add a taint, workloads will not be scheduled on that node unless you add a matching `toleration` to the workload.

For example, if you add this taint to all nodes, nothing will be scheduled!  Note that tainting doesn't impact existing workloads, only future ones.

```bash
kubectl taint nodes --all kiamol-disk=hdd:NoSchedule
```

This is how you would add the `toleration` to a workload:

```yaml
spec:                           # The Pod spec in a Deployment
 containers:
   - name: sleep
     image: kiamol/ch03-sleep      
 tolerations:                  # Lists taints this Pod is happy with
     - key: "kiamol-disk"      # The key, value, and effect all need 
       operator: "Equal"       # to match the taint on the node.
       value: "hdd"
       effect: "NoSchedule"
```

Taints are only for negative associations - you can't use them to say "this node is good for this workload".  For that, you need to use `nodeSelector` or `nodeAffinity`.  **You would not use a taint so say a workload should run on a GPU node, for example.**


This is an example of using `NodeSelector`:

```yaml
spec:
 containers:
   - name: sleep
     image: kiamol/ch03-sleep      
 tolerations:                            # The Pod tolerates nodes 
   - key: "kiamol-disk"                  # with the hdd taint.
     operator: "Equal"
     value: "hdd"
     effect: "NoSchedule"
 nodeSelector:                           # The Pod will run only on nodes
   kubernetes.io/arch: zxSpectrum        # that match this CPU type.
```

The `arch` example are automatically set by Kubernetes on each node.  For example, on my laptop if I do `kl get nodes -o yaml` it will have the key,value pair  `archictecture: arm64` under `nodeInfo`.


