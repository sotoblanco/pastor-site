---
title: RBAC
description: Rule Based Access Control
order: 30
---

You don't want everyone to have admin priviliges on a K8s cluster.  For example `kl delete ns --all` or `kl delete deploy --all -A` (deletes all deployments in all namespaces).

## Terminology:

- `subject`: a user, system account or group.
- `Role`: a defined set of permissions that you will apply to subject(s).
- `RoleBinding`: config where you assign roles to subject(s).

RBAC grants permissoins to perform actions on resources.  You set a permissions in a role, and apply the role to one or more subject.

## Namespaced vs cluster objects

Some resources are namespaces, some are cluster wide.  

- `Role` and `RoleBinding` work on namepsaced objects.
- `ClusterRole` and `ClusterRoleBinding` work on the whole cluster

![](rbac-1.png)

There are lots of built in `ClusterRole`s which you can see with:

```bash
kl get clusterrole
```

## Authentication

You don't login to K8s cluster with a username.  K8s does not authenticate end users -- it relies on external identity providers.  Cloud platforms will provide this user identification and authentication layer for you.



## Applying RoleBindings

An easy path is to use an existing built in `ClusterRole` and assign it to a subject.  For example, we can assign the `view` role to a specific user:

```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
 name: reader-view
 namespace: default                    # The scope of the binding
subjects:
- kind: User
 name: reader@kiamol.net               # The subject is the new user
 apiGroup: rbac.authorization.k8s.io
roleRef:
 kind: ClusterRole
 name: view                            # Gives them the view role for  
 apiGroup: rbac.authorization.k8s.io   # objects in the default namespace
```

Several important notes:
- We have to assign the `RoleBinding` to a namespace, because `RoleBinding` is scoped to a namespace, even though we are referencing an existing `ClusterRole`
- The `apiGroup` is the relationship between the 

[API groups](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#-strong-api-groups-strong-)